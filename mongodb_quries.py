# -*- coding: utf-8 -*-
"""Mongodb Quries

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Co-HXgdwBVp4359SXaj6oI6uB9hmLvU
"""

!pip install "pymongo[srv]==3.12"

from pymongo import MongoClient

# Task 1: Create Your Own Dataset
# 1. Create a MongoDB client
uri = "mongodb+srv://hemasunddarsaaiisrinivas2003_db_user:ySvUxpwWBylnspWT@cluster0.s1getzp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(uri)
# 2. creating a database name called StudentDB.
db = client["StudentDB"]
# 3. creating the a collection named students inside the student database
students = db["students"]
students.delete_many({}) # delete all documents in the students collection. it helps to doesnot create duplicates.
student_data = [
    {"no":1, "name": "Hema", "age": 20, "course": "Data Science", "marks": 85, "city": "Chennai", "email": "hema12@gmail.com"},
    {"no":2, "name": "Saaii", "age": 21, "course": "AI", "marks": 92, "city": "Bangalore", "email": "saaii@example.com"},
    {"no":3, "name": "Srinivas", "age": 22, "course": "Web Development", "marks": 74, "city": "Hyderabad", "email": "srinivas@microsoft.com"},
    {"no":4, "name": "Anish", "age": 23, "course": "AI", "marks": 65, "city": "Chennai", "email": "anish@gmail.com"},
    {"no":5, "name": "Samson", "age": 20, "course": "Data Science", "marks": 90, "city": "Pune", "email": "samson@zeno.com"},
    {"no":6, "name": "Joshi", "age": 21, "course": "Cyber Security", "marks": 40, "city": "Delhi", "email": "joshi@gmail.com"},
    {"no":7, "name": "Charan", "age": 22, "course": "AI", "marks": 78, "city": "Chennai", "email": "charan@gmail.com"},
    {"no":8, "name": "Sathya", "age": 23, "course": "Web Development", "marks": 81, "city": "Bangalore", "email": "sathya@example.com"},
    {"no":9, "name": "Shiva", "age": 21, "course": "Cyber Security", "marks": 35, "city": "Mumbai", "email": "shiva@zeno.com"},
    {"no":10, "name": "Purni", "age": 20, "course": "Data Science", "marks": 88, "city": "Delhi", "email": "purni@zeno.com"},
    {"no":11, "name": "Ranga", "age": 22, "course": "Web Development", "marks": 60, "city": "Hyderabad", "email": "Ranga@example.com"},
    {"no":12, "name": "Anshu", "age": 23, "course": "AI", "marks": 95, "city": "Chennai", "email": "anshu@gmail.com"},
    {"no":13, "name": "Jordi", "age": 21, "course": "Cyber Security", "marks": 55, "city": "Pune", "email": "jordi@gmail.com"},
    {"no":14, "name": "Lakshmi", "age": 20, "course": "Web Development", "marks": 79, "city": "Delhi", "email": "lakshmi@example.com"},
    {"no":15, "name": "Rohit", "age": 22, "course": "AI", "marks": 99, "city": "Bangalore", "email": "rohit@example.com"},
]

students.insert_many(student_data)
print("Inserted", len(student_data), "student records.")

#Task 2: Basic Queries
#1. Display all student records.
print("\n 1. All student records:")
for s in students.find({}):
    print(f"\nStudent details for roll number {s['no']}:")
    print(s)

#2. Find all students enrolled in a specific course of your choice.
print("\n2. Students enrolled in AI:")
course = "AI"
for s in students.find({"course": course}):
    print(s["no"],s["name"],s["course"])

#3. Find students with marks greater than 75.
print("\n3. Students with marks greater than 75:")
for s in students.find({"marks": {"$gt": 75}}):
  print(s["no"],s["name"],s["marks"])

#4. Retrieve students from your chosen city.
print("\n4. Students from city Chennai:")
for s in students.find({"city": "Chennai"}):
  print(s["no"],s["name"],s["city"])

#Task 3: Update & Delete Operations
# 1. Update the email of one student.
students.update_one({"email": "samson@gmail.com"}, {"$set": {"email": "samson123@gmail.com"}})
print("\nUpdate email for samson@zeno.com")
for s in students.find({"no": 5}):
    print(f"\n 1.Student updated details id number {s['no']}:")
    print(s)

# 2. Increase marks by 10 for all students in one particular course.
students.update_many({"course": "Web Development"}, {"$inc": {"marks": 10}})
print("\n 2. Updated Web Development Students marks:")
for s in students.find({"course": "Web Development"}):
    print(s["no"], s["name"], s["marks"])

# 3. Delete all students with marks below 40.
for s in students.find({"marks": {"$lt": 40}}):
  print(f"\n 3.1 display whose marks below 40")
  print(s["no"],s["name"],s["course"],s["marks"])

students.delete_many({"marks": {"$lt": 40}})
print(f"Deleted students with marks < 40.")

print(f"\n3.2 result after the deleated below 40.")
for s in students.find({"marks": {"$lt": 40}}):
  print(s["no"],s["name"],s["course"],s["marks"])

#Task 4: Aggregation & Analysis
# 1. Count how many students are in each course.
print("\n 1. Number of students per each course:")
count = [{"$group": {"_id": "$course", "count": {"$sum": 1}}}, {"$sort": {"count": 1}}]
for s in students.aggregate(count):
    print(s)

# 2.Find the average marks per course.
print("\n 2. Students average marks per course:")
avg = [{"$group": {"_id": "$course", "avg_marks": {"$avg": "$marks"}}},{"$sort": {"avg_marks": 1}}]
for s in students.aggregate(avg):
    print(s)

# 3. Display the top 3 students with the highest marks.
print("\n 3. Top 3 students getting highest marks:")
for s in students.find({}).sort("marks", -1).limit(3):
    print(s["no"],s["name"],s["course"],s["marks"])

# 4. Sort students by marks in descending order.
print("\n 4. All students sorted by marks in descending order:")
for s in students.find({}).sort("marks", -1):
    print(f"\nStudent details for roll number {s['no']}:")
    print(s)

# Task 5: Export & Report
# 1. Export your custom dataset (students collection) into a JSON file
import json
data = list(students.find({}, {"_id": 0}))

# Write to JSON file
with open("students.json", "w") as f:
    json.dump(data, f, indent=4)

print("Exported students collection to students.json")

